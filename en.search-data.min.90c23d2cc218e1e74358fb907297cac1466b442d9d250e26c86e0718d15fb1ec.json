[{"id":0,"href":"/LSUClient-docs/docs/getting-started/examples/","title":"Examples","section":"Getting Started","content":"Examples #  Get available updates #  Get-LSUpdate Get and install available updates #  $updates = Get-LSUpdate $updates | Install-LSUpdate -Verbose Install only packages that can be installed silently and non-interactively #  $updates = Get-LSUpdate | Where-Object { $_.Installer.Unattended } $updates | Save-LSUpdate -Verbose $updates | Install-LSUpdate -Verbose Filtering out non-unattended packages like this is strongly recommended when using this module in MDT, SCCM, PDQ, remote execution via PowerShell Remoting, ssh or any other situation in which you run these commands remotely or as part of an automated process. Packages with installers that are not unattended may force reboots or attempt to start a GUI setup on the machine and, if successful, halt until someone clicks through the dialogs.\nGet all available packages #  $updates = Get-LSUpdate -All By default, Get-LSUpdate only returns \u0026ldquo;needed\u0026rdquo; updates. Needed updates are those that are applicable to the system and not yet installed. If you want to retrieve all available packages instead, use Get-LSUpdate -All. To filter out unneeded packages later, just look at the IsApplicable and IsInstalled properties. The default logic is equivalent to: Get-LSUpdate -All | Where-Object { $_.IsApplicable -and -not $_.IsInstalled }\nDownload drivers for another computer #  Get-LSUpdate -Model 20LS -All | Save-LSUpdate -Path \u0026#39;C:\\Drivers\\20LS\u0026#39; -ShowProgress Using the -Model parameter of Get-LSUpdate you can retrieve packages for another computer model. In this case you almost always want to use -All too so that the packages found are not filtered against your computer and all packages are downloaded.\n For more details, available parameters and guidance on how to use them run Get-Help -Detailed on the functions in this module.\n"},{"id":1,"href":"/LSUClient-docs/docs/getting-started/bios-and-firmware/","title":"BIOS/UEFI and Firmware updates","section":"Getting Started","content":"BIOS/UEFI and other firmware updates #  LSUClient will install BIOS/UEFI updates silently when possible.\nLike with any other package, those for which a silent installation is supported will have their .Installer.Unattended property set to $True. If you get a BIOS/UEFI update for which .Installer.Unattended is $False, that means it uses a type of installer/flasher for which either no silent install options exist or for which LSUClient doesn\u0026rsquo;t support performing silent installs yet.\nWhen you install such a non-silent package its setup routine will be invoked with the default arguments in the same way System Update would.\nLikely this will mean a graphical wizard will come up and wait for you to confirm or cancel the update.\nHandling reboots #  It is important to know that some Lenovo computers require a reboot to apply BIOS updates while other models require a shutdown - the BIOS will then wake the machine from the power-off state, apply the update and boot back into Windows. Other, non-BIOS firmware updates typically always require a reboot. So as to not interrupt a deployment or someone working, this module will never initiate reboots or shutdowns on its own, however it\u0026rsquo;s easy for you to:\n  Capture the PackageInstallResult objects returned by Install-LSUpdate, e.g.:\n[array]$results = Install-LSUpdate -Package $updates   Then test for the PendingAction values REBOOT_MANDATORY or SHUTDOWN and handle them in your script:\nif ($results.PendingAction -contains \u0026#39;REBOOT_MANDATORY\u0026#39;) { # reboot immediately or set a marker for yourself to perform the reboot shortly } if ($results.PendingAction -contains \u0026#39;SHUTDOWN\u0026#39;) { # shutdown immediately or set a marker for yourself to perform the shutdown shortly } If you prefer to loop through the updates one-by-one and handle their result immediately, you can use -eq or a switch statement:\nforeach ($update in $updates) { $result = Install-LSUpdate -Package $update switch ($result.PendingAction) { # your logic here } }   SaveBIOSUpdateInfoToRegistry Parameter #  This parameter is deprecated and only documented for the sake of helping move existing scripts away from it.\nIt may be removed in a future major release of LSUClient. Use the technique described above instead.\n There is also a -SaveBIOSUpdateInfoToRegistry parameter on Install-LSUpdate.\nPrior to version 1.4.0, this used to be the only way for LSUClient to communicate a required power cycle back to you.\nWhen Install-LSUpdate is called with this parameter and it successfully installs a BIOS update, it will write some registry keys to HKLM\\Software\\LSUClient\\BIOSUpdate, including the string ActionNeeded which will contain either \u0026quot;REBOOT\u0026quot; or \u0026quot;SHUTDOWN\u0026quot;.\nHowever, using the -SaveBIOSUpdateInfoToRegistry parameter is no longer recommended because, as the name implies, it only sets those registry keys when installing BIOS/UEFI updates and not for any other kinds of firmware updates that might require a reboot just the same.\nTo summarize the differences and aid the transition, the following table compares the values to expect in different scenarios:\n   Scenario PendingAction property \u0026ldquo;ActionNeeded\u0026rdquo; registry value set by -SaveBIOSUpdateInfoToRegistry     ThinkPad BIOS update REBOOT_MANDATORY REBOOT   ThinkCentre BIOS update SHUTDOWN SHUTDOWN   Any Reboot Type 5 update REBOOT_MANDATORY    Any Reboot Type 3 update REBOOT_SUGGESTED    Any Reboot Type 0 update NONE    Any unsuccessful update NONE     As you can see, the PendingAction property is always set and more explicit and granular in communicating whether a power cycle is needed or not.\nExcluding BIOS and/or firmware updates #  If you want to simply not install any BIOS/UEFI updates, I recommend filtering them by Type and possibly Category and Title as a fallback.\nNot all packages have type information, sometimes Type is $null so don\u0026rsquo;t rely on this property alone  Packages sourced from internal repositories created with \u0026ldquo;Lenovo Update Retriever\u0026rdquo; never have Category information.\nIn that scenario it is best to either not include BIOS updates in your repository at all or to filter them by their IDs before installing.\n Filtering out BIOS/UEFI updates:\n$updates = Get-LSUpdate | Where-Object { $_.Type -ne \u0026#39;BIOS\u0026#39; } | Where-Object { $_.Category -notmatch \u0026#34;BIOS|UEFI\u0026#34; } | Where-Object { $_.Title -notmatch \u0026#34;BIOS|UEFI\u0026#34; } Filtering out other firmware updates:\n$updates = Get-LSUpdate | Where-Object { $_.Type -ne \u0026#39;Firmware\u0026#39; } | Where-Object { $_.RebootType -ne 5 } | Where-Object { $_.Category -notlike \u0026#34;*Firmware*\u0026#34; } | Where-Object { $_.Title -notlike \u0026#34;*Firmware*\u0026#34; } Recommended reading #  https://support.lenovo.com/de/en/solutions/ht507859-bios-flashing-sccm-support-thinkcentre-thinkstation\nhttps://thinkdeploy.blogspot.com/2019/06/what-are-reboot-delayed-updates.html\n"}]